from ryu.lib import hub
#from collector import Collector
from random import randint
from ryu.base import app_manager
from ryu.controller import mac_to_port
from ryu.controller import ofp_event
from ryu.controller.handler import CONFIG_DISPATCHER
from ryu.controller.handler import MAIN_DISPATCHER
from ryu.controller.handler import set_ev_cls
from ryu.ofproto import ofproto_v1_3
from ryu.lib.mac import haddr_to_bin
from ryu.lib.packet import ipv6
from ryu.lib.packet import arp
from ryu.lib.packet import packet
from ryu.lib.packet import ethernet
from ryu.lib.packet import ether_types
from ryu.topology import api as ryu_api
from ryu.topology.event import EventLinkAdd, EventLinkDelete
import networkx as nx
import pause
import time
isRouting = false
isCalculating =true
start_time2 = time.time()
class RouteApp(app_manager.RyuApp):
    
    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]

    def __init__(self, *args, **kwargs):
        super(RouteApp, self).__init__(*args, **kwargs)
        self.mac_to_port = {}
        self.mymac = {}
        self.thread = {}
        self.thread['update'] = hub.spawn_after(11, self._stat_request)

    def add_flow(self, datapath, match, actions, priority=1, buffer_id=None):
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,
                                             actions)]
        if buffer_id:
            mod = parser.OFPFlowMod(datapath=datapath, buffer_id=buffer_id,
                                    priority=priority, match=match,
                                    instructions=inst)
        else:
            mod = parser.OFPFlowMod(datapath=datapath, priority=priority,
                                    match=match, instructions=inst)
        datapath.send_msg(mod)

    def find_host(self, mac_addr):
        hosts = ryu_api.get_all_host(self)
        for host in hosts:
            if host.mac == mac_addr:
                return host

        return None

    def flood_packet(self, dp, msg):
        ofproto = dp.ofproto
        out_port = ofproto.OFPP_FLOOD
        actions = [dp.ofproto_parser.OFPActionOutput(out_port)]
        data = None

        if msg.buffer_id == ofproto.OFP_NO_BUFFER:
            data = msg.data

        out = dp.ofproto_parser.OFPPacketOut(
            datapath=dp, buffer_id=msg.buffer_id, in_port=msg.in_port,
            actions=actions, data=data)
        dp.send_msg(out)


    def get_all_links(self):

        all_links = ryu_api.get_all_link(self)
        result = []
        for link in all_links:
	    
            src = '{}.{}'.format(link.src.dpid, link.src.port_no)
            dst = '{}.{}'.format(link.dst.dpid, link.dst.port_no)
            result.append(
                (src, dst, {'weight': randint(1,5)}))

        # internal switch links
        all_switches = ryu_api.get_all_switch(self)
        link_to_add = []
	#self.logger.info(all_switches)
        for switch in all_switches:
            ports = switch.ports
	    #self.logger.info("[ports]")
	    #self.logger.info(ports)
            for port in ports:
                for _port in ports:
                    if port != _port:
                        src = '{}.{}'.format(port.dpid, port.port_no)
                        dst = '{}.{}'.format(_port.dpid, _port.port_no)
                        link_to_add.append((src, dst, {'weight': 1}))

        result.extend(link_to_add)
	#self.logger.info(result)
        return result

    def cal_shortest_path(self, src_host, dst_host):
        src_port = src_host.port
        dst_port = dst_host.port
	
        all_links = self.get_all_links()
	self.logger.info("[all link]")
	self.logger.info(all_links)
	self.logger.info('')


        graph = nx.Graph()
        graph.add_edges_from(all_links)
	


        src = '{}.{}'.format(src_port.dpid, src_port.port_no)
        dst = '{}.{}'.format(dst_port.dpid, dst_port.port_no)
	self.logger.info("[src]{} [dst]{}".format(src,dst))        
	rute = []
	self.logger.info('[has path?] {}'.format(nx.has_path(graph, src, dst)))
	pathx = nx.dijkstra_path(
                        graph,'5.1','2.1')
	self.logger.info(pathx)
        if nx.has_path(graph, src, dst):
	
            # Bellman Ford Algorithm
            if (!isCalculating):
                global indikator2
                global start_time2
                start_time2 = time.time()
                isCalculating = true
                
                path = nx.bellman_ford(
                        graph,src,dst)
                # print("Time", time.time() - start_time2)
                return path

        return None

    def get_dp(self, dpid):
        switch = ryu_api.get_switch(self, dpid)[0]
        return switch.dp

    def packet_out(self, dp, msg, out_port):
        ofproto = dp.ofproto
        actions = [dp.ofproto_parser.OFPActionOutput(out_port)]
        data = None

        if msg.buffer_id == ofproto.OFP_NO_BUFFER:
            data = msg.data

        out = dp.ofproto_parser.OFPPacketOut(
            datapath=dp, buffer_id=msg.buffer_id, in_port=msg.in_port,
            actions=actions, data=data)
        dp.send_msg(out)

    def install_path(self, parser, src_ip, dst_ip, path):
        match_ip = parser.OFPMatch(
            eth_type=ether_types.ETH_TYPE_IP,
            ipv4_src=src_ip,
            ipv4_dst=dst_ip
        )
        match_arp = parser.OFPMatch(
            eth_type=ether_types.ETH_TYPE_ARP,
            arp_spa=src_ip,
            arp_tpa=dst_ip
        )
        for node in path:
            dpid = int(node.split('.')[0])
            port_no = int(node.split('.')[1])
            # print src_ip, "->", dst_ip, "via ", dpid, " out_port=", port_no
            dp = self.get_dp(dpid)
            actions = [dp.ofproto_parser.OFPActionOutput(port_no)]
            self.add_flow(dp, match_ip, actions)
            self.add_flow(dp, match_arp, actions)
        self.installing = False

    @set_ev_cls(EventLinkAdd, MAIN_DISPATCHER)
    def link_addhandler(self, ev):
        self.logger.info('%s', ev)
	switches = ryu_api.get_all_switch(self)
        for switch in switches:
            [self.remove_flows(switch.dp, n) for n in [0, 1]]
            self.install_controller(switch.dp)

    @set_ev_cls(EventLinkDelete, MAIN_DISPATCHER)
    def link_deletehandler(self, ev):
        self.logger.info('%s', ev)
	
        switches = ryu_api.get_all_switch(self)
        for switch in switches:
            [self.remove_flows(switch.dp, n) for n in [0, 1]]
            self.install_controller(switch.dp)
	

    def remove_flows(self, datapath, table_id):
        global indikator
        global start_time2
        indikator=1
        start_time2 = time.time()
        parser = datapath.ofproto_parser
        ofproto = datapath.ofproto
        empty_match = parser.OFPMatch()
        instructions = []
        flow_mod = self.remove_table_flows(datapath, table_id,
        empty_match, instructions)
        #print "deleting all flow entries in table ", table_id
        datapath.send_msg(flow_mod)
	

    def remove_table_flows(self, datapath, table_id, match, instructions):
	
        ofproto = datapath.ofproto
        flow_mod = datapath.ofproto_parser.OFPFlowMod(datapath, 0, 0, table_id,
                                                    ofproto.OFPFC_DELETE, 0, 0,
                                                    1,
                                                    ofproto.OFPCML_NO_BUFFER,
                                                    ofproto.OFPP_ANY,
                                                    ofproto.OFPG_ANY, 0,
                                                    match, instructions)
        return flow_mod

    def install_controller(self, datapath):
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        match = parser.OFPMatch()
        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,
                                          ofproto.OFPCML_NO_BUFFER)]
        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,
                                             actions)]
        mod = datapath.ofproto_parser.OFPFlowMod(
            datapath=datapath, match=match, cookie=0,
            command=ofproto.OFPFC_ADD, idle_timeout=0, hard_timeout=0,
            priority=0, instructions=inst)
        datapath.send_msg(mod)
	
    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)
    def switch_features_handler(self, ev):
        datapath = ev.msg.datapath
        self.install_controller(datapath)
	
    
    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)
    def _packet_in_handler(self, ev):

        start_time = time.time()
        
        

        msg = ev.msg
        datapath = msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        in_port = msg.match['in_port']

        pkt = packet.Packet(msg.data)
        eth = pkt.get_protocol(ethernet.ethernet)
        arp_pkt = pkt.get_protocol(arp.arp)
        ipv6_pkt = pkt.get_protocol(ipv6.ipv6)

        # avoid broadcast from LLDP
        if eth.ethertype == 35020:
            return

        if ipv6_pkt:  # Drop the IPV6 Packets.
            match = parser.OFPMatch(eth_type=eth.ethertype)
            actions = []
            self.add_flow(datapath, match, actions)
            return None

        dst = eth.dst
        src = eth.src
        dpid = datapath.id

        self.mac_to_port.setdefault(dpid, {})

        self.mac_to_port[dpid][src] = in_port

        if src not in self.mymac.keys():
            self.mymac[src] = (dpid, in_port)

        out_port = ofproto.OFPP_FLOOD
        
        if (!isRouting):
            global isRouting
            
            if arp_pkt:
                
                src_ip = arp_pkt.src_ip
                dst_ip = arp_pkt.dst_ip
                
                if dst in self.mymac.keys():
                
		        if dst in self.mac_to_port[dpid]:
		        
		            self.logger.info('-------------------------------------------------------------------------------')
		            self.logger.info(
		                'installing path from {} to {}'.format(src, dst))
		            
		            dst_host = self.find_host(dst)
		            src_host = self.find_host(src)
		            

		            # calculate shortest path
		            shortest_path = self.cal_shortest_path(src_host, dst_host)

		            self.logger.info('Bellman Ford Algorithm : ')
		            self.logger.info(shortest_path)
		            self.logger.info('')

		            self.install_path(parser, src_ip, dst_ip, shortest_path[1::2])

		            # create reverse path
		            reverse_path = list(reversed(shortest_path))
		            self.install_path(parser, dst_ip, src_ip, reverse_path[1::2])
		            self.logger.info(reverse_path)
		            # packet out this packet
		            node = shortest_path[1]
		            dpid = int(node.split('.')[0])
		            out_port = int(node.split('.')[1])
		            

		            
		            print("Time", time.time() - start_time2)
		            self.logger.info('-------------------------------------------------------------------------------')
		            isRouting = true
                    
                    
        actions = [parser.OFPActionOutput(out_port)]

        if out_port != ofproto.OFPP_FLOOD:
            match = parser.OFPMatch(in_port=in_port, eth_dst=dst)
            self.add_flow(datapath, match, actions)

        data = None
        if msg.buffer_id == ofproto.OFP_NO_BUFFER:
            data = msg.data

        out = parser.OFPPacketOut(
            datapath=datapath, buffer_id=msg.buffer_id, in_port=in_port,
            actions=actions, data=data)
        datapath.send_msg(out)
            
	
    def _stat_request(self):
        def send_flow_stats_request(datapath):
            ofp = datapath.ofproto
            ofp_parser = datapath.ofproto_parser
            table_id = 0xff
            out_port = ofp.OFPP_NONE
            match = ofp_parser.OFPMatch(in_port=1)
            req = ofp_parser.OFPFlowStatsRequest(
                datapath, 0, match, table_id, out_port)
            datapath.send_msg(req)
